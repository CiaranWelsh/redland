

set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install)
project(RedlandLibraries)

cmake_minimum_required(VERSION 3.15)
include(ExternalProject)

###################################################################
# Build options
#
option(BUILD_SHARED_LIBS OFF)
OPTION(MAKE_VERBOSE_MAKEFILE ON)

if (WIN32)
    SET(PLATFORM windows)
elseif (UNIX)
    SET(PLATFORM linux)
elseif (APPLE)
    SET(PLATFORM mac)
endif ()

#################################################################
# Get or build dependencies
#

# set some variables to dependency paths

# curl paths
set(CURL_SOURCE_DIR ${CMAKE_SOURCE_DIR}/curl-7.69.1)
set(CURL_BUILD_DIR ${CURL_SOURCE_DIR}/build-${PLATFORM})
set(CURL_INSTALL_DIR ${CURL_SOURCE_DIR}/install)

# zlib paths
set(ZLIB_SOURCE_DIR ${CMAKE_SOURCE_DIR}/zlib-1.2.11)
set(ZLIB_BUILD_DIR ${ZLIB_SOURCE_DIR}/build-${PLATFORM})
set(ZLIB_INSTALL_PREFIX ${ZLIB_SOURCE_DIR}/install)


# build zlib. Works for both windows and linux
ExternalProject_Add(zlib
        SOURCE_DIR ${ZLIB_SOURCE_DIR}
        BINARY_DIR ${ZLIB_BUILD_DIR}
        CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${ZLIB_INSTALL_PREFIX}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        )


# find zlib static library
find_library(ZLIB_STATIC_LIBRARY
        NAMES libz.a
        PATHS
        /usr/lib/x86_64-linux-gnu # default for WSL
        ${ZLIB_INSTALL_PREFIX}/lib # for windows x64
        REQUIRED
        )

# find ZLIB include_dirs
find_path(ZLIB_INCLUDE_DIRS
        NAMES
        zlib/zlib.h zlib.h
        PATHS
        /usr/include
        ${ZLIB_INSTALL_PREFIX}/include # windows x64
        )


# this variable is platform specific, so start list here and append later
set(LIBXML2_EXTRA_LIBS "")

message(STATUS "WIN32 ${WIN32}")
message(STATUS "MSVC ${MSVC}")
message(STATUS "UNIX ${UNIX}")

# platform specific stuff
if (${WIN32} AND ${MSVC} AND NOT ${UNIX}) # AND MSVC so we can add cygwin/mingw specific stuff later. NOT UNIX for WSL2

    # libxml paths
    set(LIBXML2_SOURCE_DIR ${CMAKE_SOURCE_DIR}/libxml2-2.9.10/win32)
    set(LIBXML2_BUILD_DIR ${LIBXML2_SOURCE_DIR}/build-${PLATFORM})
    set(LIBXML2_INSTALL_DIR ${LIBXML2_SOURCE_DIR}/install.windows)

    # get paths to windows builds of iconv
    set(ICONV_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/libiconv_x64-windows)
    set(ICONV_INSTALL_PREFIX D:/redland/libiconv_x64-windows)

    find_path(ICONV_INCLUDE_DIRS
            NAMES iconv.h
            PATHS ${ICONV_INSTALL_PREFIX}/include
            REQUIRED
            )
    find_path(ICONV_LIBRARY_DIRS
            NAMES iconv.lib libiconv.lib
            PATHS ${ICONV_INSTALL_PREFIX}/lib
            REQUIRED
            )

    find_program(CSCRIPT_EXE
            NAMES cscript
            REQUIRED
            )

    # build libxml2
    ExternalProject_Add(libxml2
            SOURCE_DIR ${LIBXML2_SOURCE_DIR}
            PREFIX ${LIBXML2_SOURCE_DIR}
            BINARY_DIR ${LIBXML2_SOURCE_DIR}
            DEPENDS zlib
            CONFIGURE_COMMAND ${CSCRIPT_EXE} ${LIBXML2_SOURCE_DIR}/configure.js compiler=msvc prefix=${CMAKE_SOURCE_DIR}/install.windows include=${ICONV_INCLUDE_DIRS} lib=${ICONV_LIBRARY_DIRS}
            BUILD_COMMAND nmake /f ${LIBXML2_SOURCE_DIR}/Makefile.msvc
            INSTALL_COMMAND nmake install
            )


elseif (UNIX)

    set(PLATFORM "LINUX")

    list(APPEND LIBXML2_EXTRA_LIBS "m" "lzma" "c")

    set(LIBXML2_SOURCE_DIR ${CMAKE_SOURCE_DIR}/libxml2-2.9.10)
    set(LIBXML2_BUILD_DIR ${LIBXML2_SOURCE_DIR}/build-${PLATFORM})
    set(LIBXML2_INSTALL_DIR ${LIBXML2_SOURCE_DIR}/install.ubuntu)

    message(STATUS "LIBXML2_SOURCE_DIR ${LIBXML2_SOURCE_DIR}")
    message(STATUS "LIBXML2_BUILD_DIR ${LIBXML2_BUILD_DIR}")
    message(STATUS "LIBXML2_INSTALL_DIR ${LIBXML2_INSTALL_DIR}")

    if (NOT EXISTS ${LIBXML2_SOURCE_DIR}/autogen.sh)
        MESSAGE(FATAL_ERROR "libxml2 autogen.sh script does not exist")

    endif ()

    ExternalProject_Add(
            libxml2
            SOURCE_DIR ${LIBXML2_SOURCE_DIR}
            PREFIX ${LIBXML2_SOURCE_DIR}        # Necessary for getting correct build directory
            BINARY_DIR ${LIBXML2_SOURCE_DIR}
            CONFIGURE_COMMAND ${LIBXML2_SOURCE_DIR}/autogen.sh --prefix=${LIBXML2_INSTALL_DIR}
            BUILD_COMMAND make
            INSTALL_COMMAND sudo make install
    )

endif ()
#
#############################################################################
## Commands for all systems
##
#

# build curl from source on windows
ExternalProject_Add(
        curl
        SOURCE_DIR ${CURL_SOURCE_DIR}
        BINARY_DIR ${CURL_BUILD_DIR}
        CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${CURL_INSTALL_DIR}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
)

# find libxml2 static library
find_library(LIBXML2_STATIC_LIBRARY
        NAMES libxml2.a libxml2.lib
        PATHS
        /usr/lib/x86_64-linux-gnu # default for WSL
        ${CMAKE_SOURCE_DIR}/libxml2-2.7.8.win32/lib # for windows x64
        REQUIRED
        )
# find libxml2 include dirs
find_path(LIBXML2_INCLUDE_DIRS
        NAMES
        libxml/parser.h
        PATHS
        /usr/include/ # linux
        /usr/include/libxml2/ # linux
        ${CMAKE_SOURCE_DIR}/libxml2-2.7.8.win32/include # windows x64
        )


# find libxslt static library
find_library(LIBXSLT_STATIC_LIBRARY
        NAMES libxslt.a libxslt.lib
        PATHS
        /usr/lib/x86_64-linux-gnu # default for WSL
        ${CMAKE_SOURCE_DIR}/libxslt-1.1.26.win32/lib # for windows x64
        REQUIRED
        )
# find libxslt include dirs
find_path(LIBXSLT_INCLUDE_DIRS
        NAMES
        libxslt/xslt.h
        PATHS
        /usr/include/ # linux (WSL)
        ${CMAKE_SOURCE_DIR}/libxslt-1.1.26.win32/include # for windows x64
        )

# find CURL static library
find_library(CURL_STATIC_LIBRARY
        NAMES libcurl.a libcurl.lib libcurl-d_imp.lib
        PATHS
        /usr/lib/x86_64-linux-gnu # default for WSL
        ${CURL_INSTALL_DIR}/lib # for windows x64
        REQUIRED
        )

set_property(TARGET curl PROPERTY IMPORTED_LOCATION ${CURL_STATIC_LIBRARY})

# find CURL libraries
find_path(CURL_INCLUDE_DIRS
        NAMES
        curl/curl.h
        PATHS
        /usr/include/x86_64-linux-gnu/
        ${CURL_INSTALL_DIR}/include # windows x64
        )

###########################################################
# Compile list of CMAKE_ARGS for raptor

set(RAPTOR_SOURCE_DIR ${CMAKE_SOURCE_DIR}/raptor2-2.0.15)
set(RAPTOR_BUILD_DIR ${RAPTOR_SOURCE_DIR}/build-${PLATFORM})
set(RAPTOR_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/raptor2-2.0.15/install-ubuntu)

SET(RASQAL_SOURCE_DIR ${CMAKE_SOURCE_DIR}/rasqal-0.9.33)
SET(RASQAL_BUILD_DIR ${RASQAL_SOURCE_DIR}/build-${PLATFORM})
SET(RASQAL_INSTALL_PREFIX ${RASQAL_SOURCE_DIR}/install-ubuntu)

SET(LIBRDF_SOURCE_DIR ${CMAKE_SOURCE_DIR}/redland-1.0.17-0.9.33)
SET(LIBRDF_BUILD_DIR ${RASQAL_SOURCE_DIR}/build-${PLATFORM})
SET(LIBRDF_INSTALL_PREFIX ${RASQAL_SOURCE_DIR}/install-ubuntu)


message(STATUS "${CMAKE_SOURCE_DIR}/raptor2-2.0.15")

string(REPLACE ";" "|" LIBXML2_EXTRA_LIBS_PIPE_SEP "${LIBXML2_EXTRA_LIBS}")


# some targets (like curl) are build on windows but installed by apt-get on linux
# so we need to keep a list of targets to give to raptor as dependency
set(RAPTOR_DEPENDENCY_TARGETS zlib curl libxml2)


ExternalProject_Add(
        raptor2
        SOURCE_DIR ${RAPTOR_SOURCE_DIR}
        BINARY_DIR ${RAPTOR_BUILD_DIR}
        #        DEPENDS ${RAPTOR_DEPENDENCY_TARGETS}
        LIST_SEPARATOR |
        CMAKE_ARGS
        #        -DCMAKE_EXE_LINKER_FLAGS="-lcurl -lxml2 -lxslt -lm -lz -llzma -lc"
        -DLIBXML2_INCLUDE_DIRS=/mnt/d/redland/libxml2-2.9.10/install.ubuntu/include/libxml2
        -DLIBXML2_STATIC_LIBRARY=/mnt/d/redland/libxml2-2.9.10/install.ubuntu/lib/libxml2.a
        -DLIBXSLT_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libxslt.a
        -DLIBXSLT_INCLUDE_DIRS=/usr/include
        -DZLIB_INCLUDE_DIRS=/usr/include
        -DZLIB_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libz.a
        -DMATH_INCLUDE_DIRS=/usr/include
        -DLIBM_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libm.a
        #        -DCMAKE_INSTALL_PREFIX=./install_solo
        -DCMAKE_INSTALL_PREFIX=${RAPTOR_INSTALL_PREFIX}
        -DLIBXML2_EXTRA_LIBS=m;lzma;c
        -DYAJL_INCLUDE_DIRS=/usr/local/include/yajl
        -DYAJL_STATIC_LIBRARY=/usr/local/lib/libyajl_s.a
)

ExternalProject_Add(
        rasqal
        SOURCE_DIR ${RASQAL_SOURCE_DIR}
        BINARY_DIR ${RASQAL_BUILD_DIR}
        LIST_SEPARATOR |
        CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${RASQAL_INSTALL_PREFIX}
        -DRAPTOR2_INCLUDE_DIR=/mnt/d/redland/raptor2-2.0.15/install-ubuntu/include
        -DRAPTOR2_STATIC_LIB=/mnt/d/redland/raptor2-2.0.15/install-ubuntu/lib/libraptor2.a)


message(STATUS "
    CMake flags:
        WIN32                           ${WIN32}
        UNIX                            ${UNIX}
        APPLE                           ${APPLE}

    CMake variables:
        CMAKE_SOURCE_DIR                ${CMAKE_SOURCE_DIR}
        CMAKE_SYSTEM                    ${CMAKE_SYSTEM}
        BUILD_SHARED_LIBS               ${BUILD_SHARED_LIBS}
        CMAKE_DL_LIBS                   ${CMAKE_DL_LIBS}

    Windows specific variables:
        CSCRIPT_EXE                     ${CSCRIPT_EXE}

    Curl Directories:
        (only used on windows)
        CURL_SOURCE_DIR                 ${CURL_SOURCE_DIR}
        CURL_BUILD_DIR                  ${CURL_BUILD_DIR}
        CURL_INSTALL_DIR                ${CURL_INSTALL_DIR}
        (Used on all systems)
        CURL_STATIC_LIBRARY             ${CURL_STATIC_LIBRARY}
        CURL_INCLUDE_DIRS               ${CURL_INCLUDE_DIRS}

    LIBXML2 Directories
        LIBXML2_INCLUDE_DIRS            ${LIBXML2_INCLUDE_DIRS}
        LIBXML2_STATIC_LIBRARY          ${LIBXML2_STATIC_LIBRARY}
        LIBXML2_EXTRA_LIBS              ${LIBXML2_EXTRA_LIBS}

    LIBXSLT Directories
        LIBXSLT_STATIC_LIBRARY          ${LIBXSLT_STATIC_LIBRARY}
        LIBXSLT_INCLUDE_DIRS            ${LIBXSLT_INCLUDE_DIRS}

    Raptor2 Directories
        RAPTOR_SOURCE_DIR               ${RAPTOR_SOURCE_DIR}
        RAPTOR_BUILD_DIR                ${RAPTOR_BUILD_DIR}
        RAPTOR_INSTALL_PREFIX           ${RAPTOR_INSTALL_PREFIX}
        RAPTOR_DEPENDENCY_TARGETS       ${RAPTOR_DEPENDENCY_TARGETS}

    Rasqal Directories
        RASQAL_SOURCE_DIR               ${RASQAL_SOURCE_DIR}
        RASQAL_BUILD_DIR                ${RASQAL_BUILD_DIR}
        RASQAL_INSTALL_PREFIX           ${RASQAL_INSTALL_PREFIX}
        RASQAL_DEPENDENCY_TARGETS       ${RASQAL_DEPENDENCY_TARGETS}

    Librdf Directories
        LIBRDF_SOURCE_DIR               ${LIBRDF_SOURCE_DIR}
        LIBRDF_BUILD_DIR                ${LIBRDF_BUILD_DIR}
        LIBRDF_INSTALL_PREFIX           ${LIBRDF_INSTALL_PREFIX}
        LIBRDF_DEPENDENCY_TARGETS       ${LIBRDF_DEPENDENCY_TARGETS}

    Zlib Directories:
        ZLIB_INCLUDE_DIRS               ${ZLIB_INCLUDE_DIRS}
        ZLIB_STATIC_LIBRARY             ${ZLIB_STATIC_LIBRARY}
        ZLIB_INSTALL_PREFIX                ${ZLIB_INSTALL_PREFIX}

    Math Library Directories
        MATH_INCLUDE_DIRS               ${MATH_INCLUDE_DIRS}
        LIBM_STATIC_LIBRARY             ${LIBM_STATIC_LIBRARY}

    Iconv Directories
        ICONV_LIBRARY_DIRS              ${ICONV_LIBRARY_DIRS}
        ICONV_STATIC_LIBRARY            ${ICONV_STATIC_LIBRARY}
        ICONV_INCLUDE_DIRS              ${ICONV_INCLUDE_DIRS}
")


#-DCURL_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libcurl.a
#-DCURL_INCLUDE_DIRS=/usr/include/x86_64-linux-gnu
#-DLIBXML2_INCLUDE_DIRS=/mnt/d/redland/libxml2-2.9.10/install.ubuntu/include/libxml2
#-DLIBXML2_STATIC_LIBRARY=/mnt/d/redland/libxml2-2.9.10/install.ubuntu/lib/libxml2.a
#-DLIBXSLT_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libxslt.a
#-DLIBXSLT_INCLUDE_DIRS=/usr/include
#-DZLIB_INCLUDE_DIRS=/usr/include
#-DZLIB_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libz.a
#-DMATH_INCLUDE_DIRS=/usr/include
#-DLIBM_STATIC_LIBRARY=/usr/lib/x86_64-linux-gnu/libm.a
#-DCMAKE_INSTALL_PREFIX=./install_solo
#-DLIBXML2_EXTRA_LIBS=m;lzma;c





























